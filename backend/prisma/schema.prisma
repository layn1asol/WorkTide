// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Basic models for a freelance platform
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  fullName     String
  userType     String   // 'freelancer' or 'client'
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // Profile fields
  title        String?
  bio          String?
  skills       String[] @default([])
  hourlyRate   Float?
  rating       Float?
  completedJobs Int?
  location     String?
  imageUrl     String?
  languages    String[] @default([])
  education    Json[]   @default([])  // Array of education objects
  experience   Json[]   @default([])  // Array of experience objects
  isHidden     Boolean  @default(false) // Whether the freelancer profile is hidden from search
  
  // Relations
  tasks        Task[]   // Tasks created by clients
  ratingsReceived Rating[] @relation("FreelancerRatings") // Ratings received by freelancers
  ratingsGiven  Rating[] @relation("ClientRatings") // Ratings given by clients
  applications TaskApplication[] // Applications submitted by freelancers
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  budget      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Add more fields as needed
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String
  budget      Float
  skills      String[] @default([])
  status      String   @default("open") // 'open', 'in_progress', 'completed'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  clientId    String
  client      User     @relation(fields: [clientId], references: [id])
  applications TaskApplication[] // Applications received for this task
}

model Rating {
  id            String   @id @default(uuid())
  score         Float    // Rating score (1-5)
  comment       String?  // Optional comment with the rating
  createdAt     DateTime @default(now())
  
  // Relations
  freelancerId  String
  clientId      String
  freelancer    User     @relation("FreelancerRatings", fields: [freelancerId], references: [id])
  client        User     @relation("ClientRatings", fields: [clientId], references: [id])
  
  // Ensure a client can only rate a freelancer once
  @@unique([clientId, freelancerId])
}

model TaskApplication {
  id          String   @id @default(uuid())
  coverLetter String?  // Optional message from the freelancer
  status      String   @default("pending") // 'pending', 'accepted', 'rejected'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id])
  freelancerId String
  freelancer  User     @relation(fields: [freelancerId], references: [id])
  
  // Ensure a freelancer can only apply once to a task
  @@unique([taskId, freelancerId])
}
